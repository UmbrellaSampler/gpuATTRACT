DESCRIPTION
This package contains
	1.) Attract-Scoring-Server-library
	  	A (shared) library for Scoring calculations on the CPU and GPU. 
 	2.) scATTRACT
	  	Client that performs scoring. It uses the Attract-Server-library. 
	3.) mcATTRACT
	  	Client that performs a Monte-Carlo search. It uses the Attract-Server-library.
	4.) emATTRACT
	  	Client that performs a energy minimization by various applicable optimization techniques. It uses the Attract-Server-library.

New features/Comments:
1.0:
	The Server is now a shared library.
	The interface to the rest of the ATTACT toolkit was improved. Original pdb-files, dat-files, grid-files and par-files are supported as data source. No dumping is needed anymore.
	This includes the use of auto pivots or user-defined pivot, as well as an arbitrary receptor position.
	Please inform me when the definition of these files is changed!!!
 
1.1:
	The first version of emATTRACT is available. It is a client that performs energy minimization by a BFGS quasi-Newton method. 
	First test cases are very promising in terms of speedup and accuracy. However, the original docking performance is not (yet) achieved.
	With emATTRACT a heavy depency on the boost-library (version 1.54.0, default on Ubuntu 14.04) is introduced because the implementation is based on a coroutine-functionality. More information can be found at 
	
	http://www.boost.org/doc/libs/1_54_0/libs/coroutine/doc/html/coroutine/coroutine.html

	Furthermore, a custom build system has been developed. A makefile in the root directory (gpuATTRACT) can be used to build all components of the package. 
	Information about the usage is given in the INSTALLATION section.

	All target executables provide a suitable commandline interface. Try "./exe --help" for further usage information of the respective executable.

	In the directory "gpuATTRACT/test-cases" you can find test cases for the original version of ATTRACT as well as the GPU-Clients (em/mcATTRACT). To run them, execute the respective *.sh scripts. 
	To compare runtimes check the *.time output files.

1.2:
	The original FORTRAN ATTRACT minimizer (VA13) was adapted and integrated in emATTRACT. It turns out that VA13 generates better structures at the expense of additional function evaluations. 
	VA13 is now the default minimizer! You can switch using the -s/--solverType [VA13|BFGS] flag. 
	
	!!! Compiling issues with cuda-toolkit versions less or equal to 6.5 due to C++11 compatibility problems were detected.

1.3:
	Integrated the L-BFGS-B minimizer (FORTRAN) that is used in the PTools library into the emATTRACT minimization framework. 
	L-BFGS-B is a limited memory version of BFGS for bound constrained optimization. However, we cannot use constraints at the moment.
	
	In total 3 different optimization algorithms are now available: VA13, BFGS, L-BFGS-S.   

	 

INSTALLATION
	
Pre-installation steps:
	Install the cuda-toolkit of version >= 7.0.
		Make sure that the following environment variables are set:
		
		export CUDADIR=path/to/cuda-toolkit #e.g. /usr/local/cuda 
		export PATH=$CUDADIR/bin:$PATH
		export LD_LIBRARY_PATH=$CUDADIR/lib64

	Install the boost-library version 1.54.0: 
		
		sudo apt-get install libboost-coroutine1.54-dev
		
		(Hope, that works for you!)

	To run the test-cases install ATTRACT:
	
		http://www.attract.ph.tum.de/services/ATTRACT/documentation.html
	

Installation of package:
	Build the package using the makefile in the root directory (gpuATTRACT).

		e.g.
		Build all binaries in RELEASE mode:	
			make (-j#)
	
		Compile the emClient in DEBUG mode:
			make em TARGET=DEBUG (-j#)

		For more information type
			make help

	To enable runtime library binding:
	
	Soft links to the target executables and library is placed in gpuATTRACT/bin/ .
	In order to use executables in scripts/cmd-line:

		export ASDIR=your_path/gpuATTRACT/bin
		export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ASDIR

TODOs:
	
	Attract-Scoring-Server-library
		- support of normal modes
		- support of distance restraints.
		- runtime error checking for cuda version and device capability
		- improve NL kernel

	mcATTRACT
		- merge to emATTRACT as a different minimization strategy
		
	emATTRACT
		- improve/tune performance of minimizer
		- support additional optimization strategies
		- runtime check for boost-version
		- improve Solver interface: use a functional object for the objective function that calls the coroutine
